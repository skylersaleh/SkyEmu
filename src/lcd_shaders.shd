// Shader compilation instructions: 
// sokol-shdc -i lcd_shaders.shd -o lcd_shaders.h -l glsl330:glsl100:glsl300es:hlsl4:metal_macos:metal_ios:metal_sim:wgpu -b
// (note that for Metal and D3D11 byte code, sokol-shdc must be run on macOS and Windows)
// sokol-shdc is in tools/sokol-tools/bin

@vs lcdvs
uniform lcd_params {
    vec2 display_size;
    vec2 render_off;
    vec2 render_size;
    vec2 render_scale_x;
    vec2 render_scale_y;
    vec2 emu_lcd_size;
    float display_mode;
    float lcd_is_grayscale;
    float integer_scaling;
    float color_correction_strength;
    vec3 red_color;
    vec3 green_color;
    vec3 blue_color;
    float input_gamma;
};
in vec2 position;
in vec2 texcoord0;
out vec2 uv;
out vec2 screen_px;
void main() {
    vec2 p = position*render_size-render_size*0.5;
    // round not supported in WebGL / GLSL ES 2.0
    p = floor((p.x*render_scale_x+p.y*render_scale_y+0.5)+render_off);
    gl_Position = vec4(((p/display_size)-0.5)*vec2(2.0,-2.0), 0.5, 1.0);
    uv = texcoord0;
    screen_px = uv*emu_lcd_size;
}
@end

@fs lcdfs
uniform lcd_params_fs {
    vec2 display_size;
    vec2 render_off;
    vec2 render_size;
    vec2 render_scale_x;
    vec2 render_scale_y;
    vec2 emu_lcd_size;
    float display_mode;
    float lcd_is_grayscale;
    float integer_scaling;
    float color_correction_strength;
    vec3 red_color;
    vec3 green_color;
    vec3 blue_color;
    float input_gamma;
};
precision highp float;
precision highp int;
uniform sampler2D tex;
in vec2 uv;
in vec2 screen_px;
out vec4 frag_color;
bool cmp_colors(vec4 c1, vec4 c2){
    return distance(c1.xyz,c2.xyz)<0.03;
}
bool cmp_colors3(vec4 c1, vec4 c2, vec4 c3){
    return cmp_colors(c1,c2)&&cmp_colors(c2,c3);
}
bool cmp_colors2(vec4 c1, vec4 c2){
    return distance(c1.xyz,c2.xyz)<0.3;
}

vec4 sample_color_correct(vec2 uv){
    vec4 orig_color = texture(tex, uv);
    vec3 color = pow(orig_color.rgb,vec3(input_gamma));
    color.rgb = color.r*red_color+color.g*green_color+color.b*blue_color;
    color.rgb= pow(color.rgb,vec3(1.0/2.2));
    color = clamp(color,0.,1.);
    orig_color.rgb=mix(orig_color.rgb,color,color_correction_strength);
    return orig_color;
}
#define INCLUDE_XBRZ

#ifdef INCLUDE_XBRZ

/*
   Hyllian's xBR-vertex code and texel mapping
   
   Copyright (C) 2011/2016 Hyllian - sergiogdb@gmail.com
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is 
   furnished to do so, subject to the following conditions:
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
*/ 
// compatibility #defines
#define Source tex
#define vTexCoord uv.xy

#define SourceSize vec4(emu_lcd_size.xy, 1.0 / emu_lcd_size.xy) //either TextureSize or InputSize
#define OutSize vec4(render_size.xy, 1.0 / render_size.xy)

#define BLEND_NONE 0
#define BLEND_NORMAL 1
#define BLEND_DOMINANT 2
#define LUMINANCE_WEIGHT 1.0
#define EQUAL_COLOR_TOLERANCE 30.0/255.0
#define STEEP_DIRECTION_THRESHOLD 2.2
#define DOMINANT_DIRECTION_THRESHOLD 3.6

float DistYCbCr(vec3 pixA, vec3 pixB)
{
  const vec3 w = vec3(0.2627, 0.6780, 0.0593);
  const float scaleB = 0.5 / (1.0 - w.b);
  const float scaleR = 0.5 / (1.0 - w.r);
  vec3 diff = pixA - pixB;
  float Y = dot(diff.rgb, w);
  float Cb = scaleB * (diff.b - Y);
  float Cr = scaleR * (diff.r - Y);

  return sqrt(((LUMINANCE_WEIGHT * Y) * (LUMINANCE_WEIGHT * Y)) + (Cb * Cb) + (Cr * Cr));
}

bool IsPixEqual(const vec3 pixA, const vec3 pixB)
{
  return (DistYCbCr(pixA, pixB) < EQUAL_COLOR_TOLERANCE);
}

float get_left_ratio(vec2 center, vec2 origin, vec2 direction, vec2 scale)
{
  vec2 P0 = center - origin;
  vec2 proj = direction * (dot(P0, direction) / dot(direction, direction));
  vec2 distv = P0 - proj;
  vec2 orth = vec2(-direction.y, direction.x);
  float side = sign(dot(P0, orth));
  float v = side * length(distv * scale);

//  return step(0, v);
  return smoothstep(-sqrt(2.0)/2.0, sqrt(2.0)/2.0, v);
}

#define eq(a,b)  (a == b)
#define neq(a,b) (a != b)

#define P(x,y) sample_color_correct(coord + SourceSize.zw * vec2(x, y)).rgb

vec4 xbrz()
{
  //---------------------------------------
  // Input Pixel Mapping:  -|x|x|x|-
  //                       x|A|B|C|x
  //                       x|D|E|F|x
  //                       x|G|H|I|x
  //                       -|x|x|x|-

  vec2 scale = OutSize.xy * SourceSize.zw;
  vec2 pos = fract(vTexCoord * SourceSize.xy) - vec2(0.5, 0.5);
  vec2 coord = vTexCoord - pos * SourceSize.zw;

  vec3 A = P(-1.,-1.);
  vec3 B = P( 0.,-1.);
  vec3 C = P( 1.,-1.);
  vec3 D = P(-1., 0.);
  vec3 E = P( 0., 0.);
  vec3 F = P( 1., 0.);
  vec3 G = P(-1., 1.);
  vec3 H = P( 0., 1.);
  vec3 I = P( 1., 1.);

  // blendResult Mapping: x|y|
  //                      w|z|
  ivec4 blendResult = ivec4(BLEND_NONE,BLEND_NONE,BLEND_NONE,BLEND_NONE);

  // Preprocess corners
  // Pixel Tap Mapping: -|-|-|-|-
  //                    -|-|B|C|-
  //                    -|D|E|F|x
  //                    -|G|H|I|x
  //                    -|-|x|x|-
  if (!((eq(E,F) && eq(H,I)) || (eq(E,H) && eq(F,I))))
  {
    float dist_H_F = DistYCbCr(G, E) + DistYCbCr(E, C) + DistYCbCr(P(0,2), I) + DistYCbCr(I, P(2.,0.)) + (4.0 * DistYCbCr(H, F));
    float dist_E_I = DistYCbCr(D, H) + DistYCbCr(H, P(1,2)) + DistYCbCr(B, F) + DistYCbCr(F, P(2.,1.)) + (4.0 * DistYCbCr(E, I));
    bool dominantGradient = (DOMINANT_DIRECTION_THRESHOLD * dist_H_F) < dist_E_I;
    blendResult.z = ((dist_H_F < dist_E_I) && neq(E,F) && neq(E,H)) ? ((dominantGradient) ? BLEND_DOMINANT : BLEND_NORMAL) : BLEND_NONE;
  }


  // Pixel Tap Mapping: -|-|-|-|-
  //                    -|A|B|-|-
  //                    x|D|E|F|-
  //                    x|G|H|I|-
  //                    -|x|x|-|-
  if (!((eq(D,E) && eq(G,H)) || (eq(D,G) && eq(E,H))))
  {
    float dist_G_E = DistYCbCr(P(-2.,1.)  , D) + DistYCbCr(D, B) + DistYCbCr(P(-1.,2.), H) + DistYCbCr(H, F) + (4.0 * DistYCbCr(G, E));
    float dist_D_H = DistYCbCr(P(-2.,0.)  , G) + DistYCbCr(G, P(0.,2.)) + DistYCbCr(A, E) + DistYCbCr(E, I) + (4.0 * DistYCbCr(D, H));
    bool dominantGradient = (DOMINANT_DIRECTION_THRESHOLD * dist_D_H) < dist_G_E;
    blendResult.w = ((dist_G_E > dist_D_H) && neq(E,D) && neq(E,H)) ? ((dominantGradient) ? BLEND_DOMINANT : BLEND_NORMAL) : BLEND_NONE;
  }

  // Pixel Tap Mapping: -|-|x|x|-
  //                    -|A|B|C|x
  //                    -|D|E|F|x
  //                    -|-|H|I|-
  //                    -|-|-|-|-
  if (!((eq(B,C) && eq(E,F)) || (eq(B,E) && eq(C,F))))
  {
    float dist_E_C = DistYCbCr(D, B) + DistYCbCr(B, P(1.,-2.)) + DistYCbCr(H, F) + DistYCbCr(F, P(2.,-1.)) + (4.0 * DistYCbCr(E, C));
    float dist_B_F = DistYCbCr(A, E) + DistYCbCr(E, I) + DistYCbCr(P(0.,-2.), C) + DistYCbCr(C, P(2.,0.)) + (4.0 * DistYCbCr(B, F));
    bool dominantGradient = (DOMINANT_DIRECTION_THRESHOLD * dist_B_F) < dist_E_C;
    blendResult.y = ((dist_E_C > dist_B_F) && neq(E,B) && neq(E,F)) ? ((dominantGradient) ? BLEND_DOMINANT : BLEND_NORMAL) : BLEND_NONE;
  }

  // Pixel Tap Mapping: -|x|x|-|-
  //                    x|A|B|C|-
  //                    x|D|E|F|-
  //                    -|G|H|-|-
  //                    -|-|-|-|-
  if (!((eq(A,B) && eq(D,E)) || (eq(A,D) && eq(B,E))))
  {
    float dist_D_B = DistYCbCr(P(-2.,0.), A) + DistYCbCr(A, P(0.,-2.)) + DistYCbCr(G, E) + DistYCbCr(E, C) + (4.0 * DistYCbCr(D, B));
    float dist_A_E = DistYCbCr(P(-2.,-1.), D) + DistYCbCr(D, H) + DistYCbCr(P(-1.,-2.), B) + DistYCbCr(B, F) + (4.0 * DistYCbCr(A, E));
    bool dominantGradient = (DOMINANT_DIRECTION_THRESHOLD * dist_D_B) < dist_A_E;
    blendResult.x = ((dist_D_B < dist_A_E) && neq(E,D) && neq(E,B)) ? ((dominantGradient) ? BLEND_DOMINANT : BLEND_NORMAL) : BLEND_NONE;
  }

  vec3 res = E;

  // Pixel Tap Mapping: -|-|-|-|-
  //                    -|-|B|C|-
  //                    -|D|E|F|x
  //                    -|G|H|I|x
  //                    -|-|x|x|-
  if(blendResult.z != BLEND_NONE)
  {
    float dist_F_G = DistYCbCr(F, G);
    float dist_H_C = DistYCbCr(H, C);
    bool doLineBlend = (blendResult.z == BLEND_DOMINANT ||
                !((blendResult.y != BLEND_NONE && !IsPixEqual(E, G)) || (blendResult.w != BLEND_NONE && !IsPixEqual(E, C)) ||
                  (IsPixEqual(G, H) && IsPixEqual(H, I) && IsPixEqual(I, F) && IsPixEqual(F, C) && !IsPixEqual(E, I))));

    vec2 origin = vec2(0.0, 1.0 / sqrt(2.0));
    vec2 direction = vec2(1.0, -1.0);
    if(doLineBlend)
    {
      bool haveShallowLine = (STEEP_DIRECTION_THRESHOLD * dist_F_G <= dist_H_C) && neq(E,G) && neq(D,G);
      bool haveSteepLine = (STEEP_DIRECTION_THRESHOLD * dist_H_C <= dist_F_G) && neq(E,C) && neq(B,C);
      origin = haveShallowLine? vec2(0.0, 0.25) : vec2(0.0, 0.5);
      direction.x += haveShallowLine? 1.0: 0.0;
      direction.y -= haveSteepLine? 1.0: 0.0;
    }

    vec3 blendPix = mix(H,F, step(DistYCbCr(E, F), DistYCbCr(E, H)));
    res = mix(res, blendPix, get_left_ratio(pos, origin, direction, scale));
  }

  // Pixel Tap Mapping: -|-|-|-|-
  //                    -|A|B|-|-
  //                    x|D|E|F|-
  //                    x|G|H|I|-
  //                    -|x|x|-|-
  if(blendResult.w != BLEND_NONE)
  {
    float dist_H_A = DistYCbCr(H, A);
    float dist_D_I = DistYCbCr(D, I);
    bool doLineBlend = (blendResult.w == BLEND_DOMINANT ||
                !((blendResult.z != BLEND_NONE && !IsPixEqual(E, A)) || (blendResult.x != BLEND_NONE && !IsPixEqual(E, I)) ||
                  (IsPixEqual(A, D) && IsPixEqual(D, G) && IsPixEqual(G, H) && IsPixEqual(H, I) && !IsPixEqual(E, G))));

    vec2 origin = vec2(-1.0 / sqrt(2.0), 0.0);
    vec2 direction = vec2(1.0, 1.0);
    if(doLineBlend)
    {
      bool haveShallowLine = (STEEP_DIRECTION_THRESHOLD * dist_H_A <= dist_D_I) && neq(E,A) && neq(B,A);
      bool haveSteepLine  = (STEEP_DIRECTION_THRESHOLD * dist_D_I <= dist_H_A) && neq(E,I) && neq(F,I);
      origin = haveShallowLine? vec2(-0.25, 0.0) : vec2(-0.5, 0.0);
      direction.y += haveShallowLine? 1.0: 0.0;
      direction.x += haveSteepLine? 1.0: 0.0;
    }
    origin = origin;
    direction = direction;

    vec3 blendPix = mix(H,D, step(DistYCbCr(E, D), DistYCbCr(E, H)));
    res = mix(res, blendPix, get_left_ratio(pos, origin, direction, scale));
  }

  // Pixel Tap Mapping: -|-|x|x|-
  //                    -|A|B|C|x
  //                    -|D|E|F|x
  //                    -|-|H|I|-
  //                    -|-|-|-|-
  if(blendResult.y != BLEND_NONE)
  {
    float dist_B_I = DistYCbCr(B, I);
    float dist_F_A = DistYCbCr(F, A);
    bool doLineBlend = (blendResult.y == BLEND_DOMINANT ||
                !((blendResult.x != BLEND_NONE && !IsPixEqual(E, I)) || (blendResult.z != BLEND_NONE && !IsPixEqual(E, A)) ||
                  (IsPixEqual(I, F) && IsPixEqual(F, C) && IsPixEqual(C, B) && IsPixEqual(B, A) && !IsPixEqual(E, C))));

    vec2 origin = vec2(1.0 / sqrt(2.0), 0.0);
    vec2 direction = vec2(-1.0, -1.0);

    if(doLineBlend)
    {
      bool haveShallowLine = (STEEP_DIRECTION_THRESHOLD * dist_B_I <= dist_F_A) && neq(E,I) && neq(H,I);
      bool haveSteepLine  = (STEEP_DIRECTION_THRESHOLD * dist_F_A <= dist_B_I) && neq(E,A) && neq(D,A);
      origin = haveShallowLine? vec2(0.25, 0.0) : vec2(0.5, 0.0);
      direction.y -= haveShallowLine? 1.0: 0.0;
      direction.x -= haveSteepLine? 1.0: 0.0;
    }

    vec3 blendPix = mix(F,B, step(DistYCbCr(E, B), DistYCbCr(E, F)));
    res = mix(res, blendPix, get_left_ratio(pos, origin, direction, scale));
  }

  // Pixel Tap Mapping: -|x|x|-|-
  //                    x|A|B|C|-
  //                    x|D|E|F|-
  //                    -|G|H|-|-
  //                    -|-|-|-|-
  if(blendResult.x != BLEND_NONE)
  {
    float dist_D_C = DistYCbCr(D, C);
    float dist_B_G = DistYCbCr(B, G);
    bool doLineBlend = (blendResult.x == BLEND_DOMINANT ||
                !((blendResult.w != BLEND_NONE && !IsPixEqual(E, C)) || (blendResult.y != BLEND_NONE && !IsPixEqual(E, G)) ||
                  (IsPixEqual(C, B) && IsPixEqual(B, A) && IsPixEqual(A, D) && IsPixEqual(D, G) && !IsPixEqual(E, A))));

    vec2 origin = vec2(0.0, -1.0 / sqrt(2.0));
    vec2 direction = vec2(-1.0, 1.0);
    if(doLineBlend)
    {
      bool haveShallowLine = (STEEP_DIRECTION_THRESHOLD * dist_D_C <= dist_B_G) && neq(E,C) && neq(F,C);
      bool haveSteepLine  = (STEEP_DIRECTION_THRESHOLD * dist_B_G <= dist_D_C) && neq(E,G) && neq(H,G);
      origin = haveShallowLine? vec2(0.0, -0.25) : vec2(0.0, -0.5);
      direction.x -= haveShallowLine? 1.0: 0.0;
      direction.y += haveSteepLine? 1.0: 0.0;
    }

    vec3 blendPix = mix(D,B, step(DistYCbCr(E, B), DistYCbCr(E, D)));
    res = mix(res, blendPix, get_left_ratio(pos, origin, direction, scale));
  }

  return vec4(res, 1.0);
} 
#endif 
vec4 bilinear(vec4 v1, vec4 v2, vec4 v3, vec4 v4, vec2 scale){
    return mix(mix(v1,v2,scale.x),mix(v3,v4,scale.x),scale.y);
}
bool nomatch(vec4 v[9]){
    return !cmp_colors(v[4],v[0])&&!cmp_colors(v[4],v[1])&&!cmp_colors(v[4],v[2])&&
           !cmp_colors(v[4],v[3])&&!cmp_colors(v[4],v[5])&&
           !cmp_colors(v[4],v[6])&&!cmp_colors(v[4],v[7])&&!cmp_colors(v[4],v[8]);
}
void main() {
  vec4 val = sample_color_correct(uv);
  frag_color = val;
  float smooth_width = emu_lcd_size.x/render_size.x;
  float smooth_height = emu_lcd_size.y/render_size.y;
  vec2 pix_sub = fract(uv*emu_lcd_size);
  int mode = int(display_mode+0.5);

  if(lcd_is_grayscale>0.5&&mode ==3)mode = 2; 
  if(integer_scaling>0.5){
     val = frag_color = sample_color_correct(uv);
  }else{
    vec4 v[4];
    vec2 ip = floor(uv*emu_lcd_size.xy-0.5)+0.5;
    vec2 residual = fract(uv*emu_lcd_size.xy+0.5);
    ip/=emu_lcd_size.xy;

    v[0] = sample_color_correct(ip);
    v[1] = sample_color_correct(ip+vec2(1.0,0.0)/emu_lcd_size);
    v[2] = sample_color_correct(ip+vec2(0.0,1.0)/emu_lcd_size);
    v[3] = sample_color_correct(ip+vec2(1.0,1.0)/emu_lcd_size);

    vec2 smooth_dim = vec2(smooth_width,smooth_height);
    if(fract(render_size.x/emu_lcd_size.x)*emu_lcd_size.x<0.001)smooth_dim.x=0.001;
    if(fract(render_size.y/emu_lcd_size.y)*emu_lcd_size.y<0.001)smooth_dim.y=0.001;

    vec2 alpha = vec2(smoothstep(0.5-smooth_dim.x*0.5,0.5+smooth_dim.x*0.5,residual.x),
                      smoothstep(0.5-smooth_dim.y*0.5,0.5+smooth_dim.y*0.5,residual.y));
      
    
    val = frag_color = mix(mix(v[0],v[1],alpha.x),mix(v[2],v[3],alpha.x),alpha.y);
  }
  if(mode==1){
    vec4 v[4];
    pix_sub = fract(uv*emu_lcd_size.xy-0.5);
    vec2 ip = floor(uv*emu_lcd_size.xy-0.5)+0.5;
    ip/=emu_lcd_size.xy;

    v[0] = sample_color_correct(ip);
    v[1] = sample_color_correct(ip+vec2(1.0,0.0)/emu_lcd_size);
    v[2] = sample_color_correct(ip+vec2(0.0,1.0)/emu_lcd_size);
    v[3] = sample_color_correct(ip+vec2(1.0,1.0)/emu_lcd_size);
    frag_color = mix(mix(v[0],v[1],pix_sub.x),mix(v[2],v[3],pix_sub.x),pix_sub.y);
  }else if(mode==2){
    float rgb_factor = smoothstep(0.0,0.0+smooth_height,pix_sub.y)-smoothstep(1.0-smooth_height,1.0,pix_sub.y);    
    rgb_factor *= (smoothstep(0.0,smooth_width,pix_sub.x)-smoothstep(1.0-smooth_width,1.0,pix_sub.x));    
    rgb_factor = mix(0.66,1.,rgb_factor);
    if(lcd_is_grayscale>0.5){
        vec4 bilin = frag_color;
        vec4 v[4];
        vec2 ip = floor(uv*emu_lcd_size.xy-0.5-0.2);
        vec2 pix_sub2 = fract(ip+0.5);
        ip/=emu_lcd_size.xy;

        v[0] = sample_color_correct(ip);
        v[1] = sample_color_correct(ip+vec2(1.0,0.0)/emu_lcd_size);
        v[2] = sample_color_correct(ip+vec2(0.0,1.0)/emu_lcd_size);
        v[3] = sample_color_correct(ip+vec2(1.0,1.0)/emu_lcd_size);
        bilin = bilinear(v[0],v[1],v[2],v[3],pix_sub2);
        frag_color.rgb*=2.0-rgb_factor;
        frag_color = mix(frag_color, bilin, 0.3);
    }else frag_color.rgb*=rgb_factor;
    frag_color = mix(frag_color, val,clamp(smooth_width,0.,1.));
  }else if(mode==3){
    float expansion = 0.15;
    float smooth_width_sub = smooth_width*1.5;
    float r_factor = smoothstep(0,smooth_width_sub,pix_sub.x)-smoothstep(0.33-smooth_width_sub,0.33+expansion,pix_sub.x);
    float g_factor = smoothstep(0.33-expansion*0.5,0.33+smooth_width_sub,pix_sub.x)-
                     smoothstep(0.66-smooth_width_sub,0.66+expansion*0.5,pix_sub.x);
    float b_factor = smoothstep(0.66-expansion,0.66+smooth_width_sub,pix_sub.x)-smoothstep(1.0-smooth_width_sub,1.0,pix_sub.x);
    float rgb_factor = smoothstep(0.0,smooth_height,pix_sub.y)-smoothstep(1.0-smooth_height,1.0,pix_sub.y);    
    rgb_factor = rgb_factor*0.2+0.8;

    frag_color.r*=clamp(mix(0.6, 1.0, r_factor)*1.33,0.,1.0);
    frag_color.g*=clamp(mix(0.6, 1.0, g_factor)*1.33,0.,1.0);
    frag_color.b*=clamp(mix(0.6, 1.0, b_factor)*1.33,0.,1.0);

    frag_color = mix(frag_color, val,clamp(smooth_width*3.,0.,1.));
    frag_color *= rgb_factor;
    frag_color = mix(frag_color, val,clamp(smooth_width,0.,1.));
  }else if(mode==4)frag_color =xbrz();

}
@end

@program lcdprog lcdvs lcdfs